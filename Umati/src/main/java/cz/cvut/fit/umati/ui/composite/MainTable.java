package cz.cvut.fit.umati.ui.composite;

import java.util.Collection;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.CloseEvent;
import com.vaadin.ui.Window.CloseListener;

import cz.cvut.fit.umati.InMemoryUserData;
import cz.cvut.fit.umati.InMemoryWebApiData;
import cz.cvut.fit.umati.model.QuestionListException;
import cz.cvut.fit.umati.model.User;
import cz.cvut.fit.umati.model.WebApi;
import cz.cvut.fit.umati.model.WebApiElaborated;
import cz.cvut.fit.umati.ui.QuestionWindow;

@org.springframework.stereotype.Component
@Scope("session")
@DependsOn("inMemoryWebApiData")
public class MainTable extends CustomComponent {
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table mainTable;

	@AutoGenerated
	private HorizontalLayout mainTableToolbar;

	@AutoGenerated
	private Button processReferenceWebApi;

	@AutoGenerated
	private Button processWebApi;

	@AutoGenerated
	private Button editWebApi;

	@AutoGenerated
	private Button removeWebApi;

	@AutoGenerated
	private Button addWebApi;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Autowired
	private InMemoryWebApiData inMemoryWebApiData;

	@Autowired
	private InMemoryUserData inMemoryUserData;

	@Autowired
	private QuestionWindow questionWindow;

	boolean isEditable;

	boolean isSupervisor;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MainTable() {
		// Auth stuff
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		isSupervisor = isRolePresent(auth.getAuthorities(), "supervisor");

		// Build interface
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@PostConstruct
	public void init() {
		// Set WebApi container to table
		// BeanItemContainer<WebApi> webApiContainer = new
		// BeanItemContainer<WebApi>(WebApi.class);
		mainTable.setContainerDataSource(inMemoryWebApiData);

		// Setup table
		mainTable.setSelectable(true);
		mainTable.setImmediate(true);
		mainTable.setVisibleColumns(new Object[] { WebApi.NAME, WebApi.DESCRIPTION, WebApi.CATEGORY, WebApi.DOC_URL, WebApi.API_URL, WebApi.CORRESPONDENCE_ELEMENT_NUMBER, WebApi.CORRESPONDENCE_TYPE_DEFINITION, WebApi.CORRESPONDENCE_SEMANTIC_ANNOTATION, WebApi.TOTAL_PROGRESS });
		mainTable.addListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				isEditable = event.getProperty().getValue() != null;

				removeWebApi.setEnabled(isEditable);
				editWebApi.setEnabled(isEditable);
				processWebApi.setEnabled(isEditable);
				processReferenceWebApi.setEnabled(isEditable && isSupervisor);
			}
		});

		// Add webApi button
		addWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

			}
		});

		removeWebApi.setEnabled(false);
		removeWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

			}
		});

		editWebApi.setEnabled(false);
		editWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

			}
		});

		// Process WebApi Button Listener
		processWebApi.setEnabled(false);
		processWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				questionWindow.center();
				questionWindow.setCaption(((WebApi) mainTable.getValue()).getName());
				questionWindow.fireWindowOpen(getValue());
				getApplication().getMainWindow().addWindow(questionWindow);
			}
		});

		processReferenceWebApi.setEnabled(false);
		processReferenceWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				questionWindow.center();
				questionWindow.setCaption(((WebApi) mainTable.getValue()).getName() + " - Reference WebAPI");
				questionWindow.fireWindowOpen(getReferencedWebApi());
				getApplication().getMainWindow().addWindow(questionWindow);
			}
		});

		// Process WebApi Button
		// processReferenceWebApi.setEnabled(false);
		// if (isSupervisor && isEditable) {
		// processReferenceWebApi.setEnabled(true);
		// processReferenceWebApi.addListener(new ClickListener() {
		// private static final long serialVersionUID = 1L;
		//
		// @Override
		// public void buttonClick(ClickEvent event) {
		// questionWindow.center();
		// questionWindow.setCaption(((WebApi) mainTable.getValue()).getName() +
		// "Reference Survey");
		// questionWindow.fireWindowOpen(getReferencedWebApi());
		// getApplication().getMainWindow().addWindow(questionWindow);
		// }
		// });
		// }

		questionWindow.addListener(new CloseListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void windowClose(CloseEvent e) {
				inMemoryWebApiData.fireUpdate();
			}
		});
	}

	/*
	 * Getters
	 */
	public WebApiElaborated getValue() {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();

		WebApiElaborated actualWebApiElaborated = null;

		if (mainTable.getValue() instanceof WebApi) {
			WebApi webApi = (WebApi) mainTable.getValue();

			for (WebApiElaborated webApiElaborated : webApi.getWebApiElaboratedList()) {
				if (webApiElaborated.getUser().getUserName().equals(auth.getName())) {
					actualWebApiElaborated = webApiElaborated;
					break;
				}
			}

			if (actualWebApiElaborated == null) {
				// Create new WebApiElaborated
				try {
					actualWebApiElaborated = new WebApiElaborated();
				} catch (QuestionListException e) {
					e.printStackTrace();
				}

				// Find actual user from user list
				for (User user : inMemoryUserData.getItemIds()) {
					if (auth.getName().equals(user.getUserName())) {
						actualWebApiElaborated.setUser(user);
					}
				}

				// Add to the list of APIs
				webApi.getWebApiElaboratedList().add(actualWebApiElaborated);
			}
		}

		return actualWebApiElaborated;
	}

	public WebApiElaborated getReferencedWebApi() {
		WebApiElaborated actualWebApiElaborated = null;

		if (mainTable.getValue() instanceof WebApi) {
			WebApi webApi = (WebApi) mainTable.getValue();

			try {
				if (webApi.getReferenceWebApi() == null) {
					webApi.setReferenceWebApi(new WebApiElaborated());
				}
			} catch (QuestionListException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			actualWebApiElaborated = webApi.getReferenceWebApi();
		}

		return actualWebApiElaborated;
	}

	/**
	 * 
	 * 
	 * @param collection
	 * @param role
	 * @return
	 */
	private boolean isRolePresent(Collection<? extends GrantedAuthority> collection, String role) {
		boolean isRolePresent = false;

		for (GrantedAuthority grantedAuthority : collection) {
			isRolePresent = grantedAuthority.getAuthority().equals(role);
			if (isRolePresent)
				break;
		}

		return isRolePresent;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// mainTableToolbar
		mainTableToolbar = buildMainTableToolbar();
		mainLayout.addComponent(mainTableToolbar);

		// mainTable
		mainTable = new Table();
		mainTable.setImmediate(false);
		mainTable.setWidth("100.0%");
		mainTable.setHeight("100.0%");
		mainLayout.addComponent(mainTable);
		mainLayout.setExpandRatio(mainTable, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMainTableToolbar() {
		// common part: create layout
		mainTableToolbar = new HorizontalLayout();
		mainTableToolbar.setImmediate(false);
		mainTableToolbar.setWidth("-1px");
		mainTableToolbar.setHeight("-1px");
		mainTableToolbar.setMargin(false);

		// addWebApi
		addWebApi = new Button();
		addWebApi.setCaption("Add WebApi");
		addWebApi.setImmediate(true);
		addWebApi.setWidth("-1px");
		addWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(addWebApi);

		// removeWebApi
		removeWebApi = new Button();
		removeWebApi.setCaption("Remove WebApi");
		removeWebApi.setImmediate(true);
		removeWebApi.setWidth("-1px");
		removeWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(removeWebApi);

		// editWebApi
		editWebApi = new Button();
		editWebApi.setCaption("Edit WebApi");
		editWebApi.setImmediate(true);
		editWebApi.setWidth("-1px");
		editWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(editWebApi);

		// processWebApi
		processWebApi = new Button();
		processWebApi.setCaption("Process WebApi");
		processWebApi.setImmediate(true);
		processWebApi.setWidth("-1px");
		processWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(processWebApi);

		// processReferenceWebApi
		processReferenceWebApi = new Button();
		processReferenceWebApi.setCaption("Process Reference WebApi");
		processReferenceWebApi.setImmediate(true);
		processReferenceWebApi.setWidth("-1px");
		processReferenceWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(processReferenceWebApi);

		return mainTableToolbar;
	}
}
