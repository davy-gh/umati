package cz.cvut.fit.umati.ui.composite;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.DependsOn;
import org.springframework.context.annotation.Scope;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;

import cz.cvut.fit.umati.InMemoryData;
import cz.cvut.fit.umati.model.WebApi;

@org.springframework.stereotype.Component
@Scope("session")
@DependsOn("inMemoryData")
public class MainTable extends CustomComponent {
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private Table mainTable;

	@AutoGenerated
	private HorizontalLayout mainTableToolbar;

	@AutoGenerated
	private Button processWebApi;

	@AutoGenerated
	private Button editWebApi;

	@AutoGenerated
	private Button removeWebApi;

	@AutoGenerated
	private Button addWebApi;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Autowired
	private InMemoryData inMemoryData;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MainTable() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// Set WebApi container to table
		BeanItemContainer<WebApi> webApiContainer = new BeanItemContainer<WebApi>(WebApi.class);
		mainTable.setContainerDataSource(webApiContainer);

		// Setup table
		mainTable.setSelectable(true);
		mainTable.setVisibleColumns(new Object[] { WebApi.NAME, WebApi.DESCRIPTION, WebApi.CATEGORY, WebApi.DOC_URL, WebApi.API_URL, WebApi.CORRESPONDENCE_ELEMENT_NUMBER, WebApi.CORRESPONDENCE_TYPE_DEFINITION, WebApi.CORRESPONDENCE_SEMANTIC_ANNOTATION, WebApi.TOTAL_PROGRESS });

		// Add webApi button
		addWebApi.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {

				@SuppressWarnings("unchecked")
				BeanItemContainer<WebApi> webApiContainer = (BeanItemContainer<WebApi>) mainTable.getContainerDataSource();

				System.out.println("Co se deje: " + webApiContainer.getItemIds().size());

				for (Object id : webApiContainer.getItemIds()) {
					System.out.println("Bean: " + webApiContainer.getItem(id).getBean().getName());
				}
			}
		});
	}

	@PostConstruct
	public void init() {
		// Fill-Up WebApi container to the table
		@SuppressWarnings("unchecked")
		BeanItemContainer<WebApi> webApiContainer = (BeanItemContainer<WebApi>) mainTable.getContainerDataSource();
		webApiContainer.addAll(inMemoryData.getWebApiGroupSet());
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// mainTableToolbar
		mainTableToolbar = buildMainTableToolbar();
		mainLayout.addComponent(mainTableToolbar);

		// mainTable
		mainTable = new Table();
		mainTable.setImmediate(false);
		mainTable.setWidth("100.0%");
		mainTable.setHeight("100.0%");
		mainLayout.addComponent(mainTable);
		mainLayout.setExpandRatio(mainTable, 1.0f);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildMainTableToolbar() {
		// common part: create layout
		mainTableToolbar = new HorizontalLayout();
		mainTableToolbar.setImmediate(false);
		mainTableToolbar.setWidth("-1px");
		mainTableToolbar.setHeight("-1px");
		mainTableToolbar.setMargin(false);

		// addWebApi
		addWebApi = new Button();
		addWebApi.setCaption("Add WebApi");
		addWebApi.setImmediate(true);
		addWebApi.setWidth("-1px");
		addWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(addWebApi);

		// removeWebApi
		removeWebApi = new Button();
		removeWebApi.setCaption("Remove WebApi");
		removeWebApi.setImmediate(true);
		removeWebApi.setWidth("-1px");
		removeWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(removeWebApi);

		// editWebApi
		editWebApi = new Button();
		editWebApi.setCaption("Edit WebApi");
		editWebApi.setImmediate(true);
		editWebApi.setWidth("-1px");
		editWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(editWebApi);

		// processWebApi
		processWebApi = new Button();
		processWebApi.setCaption("Process WebApi");
		processWebApi.setImmediate(true);
		processWebApi.setWidth("-1px");
		processWebApi.setHeight("-1px");
		mainTableToolbar.addComponent(processWebApi);

		return mainTableToolbar;
	}

}
