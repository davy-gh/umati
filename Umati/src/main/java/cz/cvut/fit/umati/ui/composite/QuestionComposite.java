package cz.cvut.fit.umati.ui.composite;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import cz.cvut.fit.umati.InMemoryUserData;
import cz.cvut.fit.umati.InMemoryWebApiData;
import cz.cvut.fit.umati.model.WebApiElaborated;

@org.springframework.stereotype.Component
@org.springframework.context.annotation.Scope("session")
public class QuestionComposite extends CustomComponent {
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout buttonToolbar;

	@AutoGenerated
	private Button finishButton;

	@AutoGenerated
	private Button nextButton;

	@AutoGenerated
	private Button previousButton;

	@AutoGenerated
	private Panel questionPanel;

	@AutoGenerated
	private VerticalLayout verticalLayout_2;

	@AutoGenerated
	private HorizontalLayout progressLayout;

	@AutoGenerated
	private Label totalValues;

	@AutoGenerated
	private Label slashLabel;

	@AutoGenerated
	private Label passedValues;

	@AutoGenerated
	private ProgressIndicator questionProgressIndicator;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Autowired
	private InMemoryWebApiData inMemoryWebApiData;

	@Autowired
	private InMemoryUserData inMemoryUserData;

	@Autowired
	private NumericQuestion numericQuestion; 

	@Autowired
	private ServiceQuestion serviceQuestion;

	@Autowired
	private ParameterQuestion parameterQuestion;
	
	/**
	 * TODO: doc it
	 */
	private WebApiElaborated webApiElaborated;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public QuestionComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		previousButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});

		nextButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				
			}
		});
		
		finishButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (getParent() instanceof Window) {
					((Window) getParent()).getParent().removeWindow((Window) getParent());
				}
			}
		});
	}
	
	@PostConstruct
	public void init() {
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// questionProgressIndicator
		questionProgressIndicator = new ProgressIndicator();
		questionProgressIndicator.setImmediate(false);
		questionProgressIndicator.setWidth("100.0%");
		questionProgressIndicator.setHeight("-1px");
		mainLayout.addComponent(questionProgressIndicator);
		
		// progressLayout
		progressLayout = buildProgressLayout();
		mainLayout.addComponent(progressLayout);
		mainLayout.setComponentAlignment(progressLayout, new Alignment(20));
		
		// questionPanel
		questionPanel = buildQuestionPanel();
		mainLayout.addComponent(questionPanel);
		mainLayout.setExpandRatio(questionPanel, 1.0f);
		mainLayout.setComponentAlignment(questionPanel, new Alignment(48));
		
		// buttonToolbar
		buttonToolbar = buildButtonToolbar();
		mainLayout.addComponent(buttonToolbar);
		mainLayout.setComponentAlignment(buttonToolbar, new Alignment(24));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildProgressLayout() {
		// common part: create layout
		progressLayout = new HorizontalLayout();
		progressLayout.setImmediate(false);
		progressLayout.setWidth("-1px");
		progressLayout.setHeight("-1px");
		progressLayout.setMargin(false);
		
		// passedValues
		passedValues = new Label();
		passedValues.setImmediate(false);
		passedValues.setWidth("-1px");
		passedValues.setHeight("-1px");
		passedValues.setValue("0");
		progressLayout.addComponent(passedValues);
		
		// slashLabel
		slashLabel = new Label();
		slashLabel.setImmediate(false);
		slashLabel.setWidth("-1px");
		slashLabel.setHeight("-1px");
		slashLabel.setValue("/");
		progressLayout.addComponent(slashLabel);
		
		// totalValues
		totalValues = new Label();
		totalValues.setImmediate(false);
		totalValues.setWidth("-1px");
		totalValues.setHeight("-1px");
		totalValues.setValue("0");
		progressLayout.addComponent(totalValues);
		
		return progressLayout;
	}

	@AutoGenerated
	private Panel buildQuestionPanel() {
		// common part: create layout
		questionPanel = new Panel();
		questionPanel.setImmediate(false);
		questionPanel.setWidth("100.0%");
		questionPanel.setHeight("100.0%");
		
		// verticalLayout_2
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("100.0%");
		verticalLayout_2.setMargin(false);
		questionPanel.setContent(verticalLayout_2);
		
		return questionPanel;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonToolbar() {
		// common part: create layout
		buttonToolbar = new HorizontalLayout();
		buttonToolbar.setImmediate(false);
		buttonToolbar.setWidth("-1px");
		buttonToolbar.setHeight("-1px");
		buttonToolbar.setMargin(false);
		
		// previousButton
		previousButton = new Button();
		previousButton.setCaption("Previous");
		previousButton.setImmediate(true);
		previousButton.setWidth("-1px");
		previousButton.setHeight("-1px");
		buttonToolbar.addComponent(previousButton);
		
		// nextButton
		nextButton = new Button();
		nextButton.setCaption("Next");
		nextButton.setImmediate(true);
		nextButton.setWidth("-1px");
		nextButton.setHeight("-1px");
		buttonToolbar.addComponent(nextButton);
		
		// finishButton
		finishButton = new Button();
		finishButton.setCaption("Finish");
		finishButton.setImmediate(true);
		finishButton.setWidth("-1px");
		finishButton.setHeight("-1px");
		buttonToolbar.addComponent(finishButton);
		
		return buttonToolbar;
	}

	/*
	 * Helper methods
	 */
	
	/**
	 * TODO: doc it
	 * 
	 * @param webApiElaborated
	 */
	public void fireCompositeOpen(WebApiElaborated webApiElaborated) {
		this.webApiElaborated = webApiElaborated;
		
		// Recalculate progress
		countProgress();
	}


	/*
	 * Private methods
	 */
	
	/**
	 * TODO: doc it
	 */
	private void countProgress() {
		if (webApiElaborated.getEndPointNumber() != 0) {
			
		} else {
			// one question and zero passed
			totalValues.setValue(1); 
			passedValues.setValue(0);
		}
	}
}
