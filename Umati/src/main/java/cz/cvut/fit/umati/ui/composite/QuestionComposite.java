package cz.cvut.fit.umati.ui.composite;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.MethodProperty;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import cz.cvut.fit.umati.InMemoryUserData;
import cz.cvut.fit.umati.InMemoryWebApiData;
import cz.cvut.fit.umati.model.EndPoint;
import cz.cvut.fit.umati.model.IQuestion;
import cz.cvut.fit.umati.model.Parameter;
import cz.cvut.fit.umati.model.QuestionList;
import cz.cvut.fit.umati.model.QuestionListException;
import cz.cvut.fit.umati.model.WebApiElaborated;

@org.springframework.stereotype.Component
@org.springframework.context.annotation.Scope("session")
public class QuestionComposite extends CustomComponent {
	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout buttonToolbar;

	@AutoGenerated
	private Button finishButton;

	@AutoGenerated
	private Button nextButton;

	@AutoGenerated
	private Button previousButton;

	@AutoGenerated
	private Panel questionPanel;

	@AutoGenerated
	private VerticalLayout questionPanelLayout;

	@AutoGenerated
	private HorizontalLayout progressLayout;

	@AutoGenerated
	private Label nameLabel;

	@AutoGenerated
	private HorizontalLayout numberProgressLayout;

	@AutoGenerated
	private Label totalValues;

	@AutoGenerated
	private Label slashLabel;

	@AutoGenerated
	private Label passedValues;

	@AutoGenerated
	private Label stepLabel;

	@AutoGenerated
	private ProgressIndicator questionProgressIndicator;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Autowired
	private InMemoryWebApiData inMemoryWebApiData;

	@Autowired
	private InMemoryUserData inMemoryUserData;

	@Autowired
	private WebApiQuestion webApiQuestion;

	@Autowired
	private EndPointQuestion endPointQuestion;

	@Autowired
	private ParameterQuestion parameterQuestion;

	/**
	 * TODO: doc it
	 */
	private QuestionList questionList;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public QuestionComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		previousButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				// Previous
				try {
					questionList.rebuildHelperList();
					questionList.toPrev();
					showActualQuestionFromQueue();
				} catch (QuestionListException e) {
					getWindow().showNotification(e.getLocalizedMessage());
				}
			}
		});

		nextButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				// Next
				try {
					questionList.rebuildHelperList();
					questionList.toNext();
					showActualQuestionFromQueue();
				} catch (QuestionListException e) {
					getWindow().showNotification(e.getLocalizedMessage());
				}
			}
		});

		finishButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				if (getParent() instanceof Window) {
					((Window) getParent()).getParent().removeWindow((Window) getParent());
				}
			}
		});
	}

	@PostConstruct
	public void init() {
	}

	

	/*
	 * Helper methods
	 */

	/**
	 * Pass the actual Web Api Elaborated
	 * 
	 * @param webApiElaborated
	 */
	public void fireCompositeOpen(WebApiElaborated webApiElaborated) {
		questionList = new QuestionList(webApiElaborated);

		// Show actual question from the queue
		showActualQuestionFromQueue();
	}

	/*
	 * Private methods
	 */

	/**
	 * TODO: doc it
	 */
	private void showActualQuestionFromQueue() {
		// Set the content from the queue (should be here?)
		IQuestion actualEntity = questionList.getActual();

		if (actualEntity instanceof WebApiElaborated) {
			// Actual WebAPI entity
			WebApiElaborated actualWebApi = (WebApiElaborated) actualEntity;

			// Set properties
			MethodProperty<Integer> endPointNumberProperty = new MethodProperty<Integer>(actualWebApi, "numberOfEntities");
			webApiQuestion.getNumericInputField().setPropertyDataSource(endPointNumberProperty);

			// Set to the panel
			questionPanel.setContent(webApiQuestion);

			// Set label of the step
			nameLabel.setValue("<h3>Fill WebApi Values</h3>");

		} else if (actualEntity instanceof EndPoint) {
			// Actual EndPoint entity
			EndPoint actualEndPoint = (EndPoint) actualEntity;

			// Set properties
			MethodProperty<String> endPointUrlProperty = new MethodProperty<String>(actualEndPoint, "endPointUrl");
			endPointQuestion.getEndPointUrl().setPropertyDataSource(endPointUrlProperty);

			MethodProperty<String> endPointNameProperty = new MethodProperty<String>(actualEndPoint, "endPointName");
			endPointQuestion.getEndPointName().setPropertyDataSource(endPointNameProperty);

			MethodProperty<String> endPointDescriptionProperty = new MethodProperty<String>(actualEndPoint, "endPointDescription");
			endPointQuestion.getEndPointDescription().setPropertyDataSource(endPointDescriptionProperty);

			MethodProperty<Integer> parameterNumberProperty = new MethodProperty<Integer>(actualEndPoint, "numberOfEntities");
			endPointQuestion.getNumberOfParameters().setPropertyDataSource(parameterNumberProperty);

			// Set to the panel
			questionPanel.setContent(endPointQuestion);

			// Set label of the step
			nameLabel.setValue("<h3>Fill EndPoint Values</h3>");

		} else if (actualEntity instanceof Parameter) {
			// Actual EndPoint entity
			Parameter actualParameter = (Parameter) actualEntity;

			// Set properties
			MethodProperty<String> parameterTypeProperty = new MethodProperty<String>(actualParameter, "dataType");
			parameterQuestion.getParameterType().setPropertyDataSource(parameterTypeProperty);

			MethodProperty<String> semanticAnnotationProperty = new MethodProperty<String>(actualParameter, "semanticAnnotation");
			parameterQuestion.getParameterAnnotation().setPropertyDataSource(semanticAnnotationProperty);

			// Set to the panel
			questionPanel.setContent(parameterQuestion);

			// Set label of the step
			nameLabel.setValue("<h3>Fill Parameter Values</h3>");
		}

		// Set labels
		totalValues.setValue("<h3>" + questionList.getActualSize() + "</h3>");
		passedValues.setValue("<h3>" + (questionList.getActualIndex() + 1) + "</h3>");
		
		// Set progress bar
		questionProgressIndicator.setValue((1f / questionList.getActualSize()) * (questionList.getActualIndex() + 1));
		
		// Center the window
		if (getParent() instanceof Window) {
			((Window) getParent()).center();
		}

	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// questionProgressIndicator
		questionProgressIndicator = new ProgressIndicator();
		questionProgressIndicator.setImmediate(false);
		questionProgressIndicator.setWidth("100.0%");
		questionProgressIndicator.setHeight("-1px");
		mainLayout.addComponent(questionProgressIndicator);
		
		// progressLayout
		progressLayout = buildProgressLayout();
		mainLayout.addComponent(progressLayout);
		mainLayout.setComponentAlignment(progressLayout, new Alignment(20));
		
		// questionPanel
		questionPanel = buildQuestionPanel();
		mainLayout.addComponent(questionPanel);
		mainLayout.setExpandRatio(questionPanel, 1.0f);
		mainLayout.setComponentAlignment(questionPanel, new Alignment(48));
		
		// buttonToolbar
		buttonToolbar = buildButtonToolbar();
		mainLayout.addComponent(buttonToolbar);
		mainLayout.setComponentAlignment(buttonToolbar, new Alignment(24));
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildProgressLayout() {
		// common part: create layout
		progressLayout = new HorizontalLayout();
		progressLayout.setImmediate(false);
		progressLayout.setWidth("-1px");
		progressLayout.setHeight("-1px");
		progressLayout.setMargin(false);
		progressLayout.setSpacing(true);
		
		// stepLabel
		stepLabel = new Label();
		stepLabel.setImmediate(false);
		stepLabel.setWidth("-1px");
		stepLabel.setHeight("-1px");
		stepLabel.setValue("<h3>Step: &nbsp;</h3>");
		stepLabel.setContentMode(3);
		progressLayout.addComponent(stepLabel);
		
		// numberProgressLayout
		numberProgressLayout = buildNumberProgressLayout();
		progressLayout.addComponent(numberProgressLayout);
		
		// nameLabel
		nameLabel = new Label();
		nameLabel.setImmediate(false);
		nameLabel.setWidth("-1px");
		nameLabel.setHeight("-1px");
		nameLabel.setValue("<h3> name of the step</h3>");
		nameLabel.setContentMode(3);
		progressLayout.addComponent(nameLabel);
		
		return progressLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildNumberProgressLayout() {
		// common part: create layout
		numberProgressLayout = new HorizontalLayout();
		numberProgressLayout.setImmediate(false);
		numberProgressLayout.setWidth("-1px");
		numberProgressLayout.setHeight("-1px");
		numberProgressLayout.setMargin(false);
		
		// passedValues
		passedValues = new Label();
		passedValues.setImmediate(false);
		passedValues.setWidth("-1px");
		passedValues.setHeight("-1px");
		passedValues.setValue("<h3>0</h3>");
		passedValues.setContentMode(3);
		numberProgressLayout.addComponent(passedValues);
		
		// slashLabel
		slashLabel = new Label();
		slashLabel.setImmediate(false);
		slashLabel.setWidth("-1px");
		slashLabel.setHeight("-1px");
		slashLabel.setValue("<h3>/</h3>");
		slashLabel.setContentMode(3);
		numberProgressLayout.addComponent(slashLabel);
		
		// totalValues
		totalValues = new Label();
		totalValues.setImmediate(false);
		totalValues.setWidth("-1px");
		totalValues.setHeight("-1px");
		totalValues.setValue("<h3>0</h3>");
		totalValues.setContentMode(3);
		numberProgressLayout.addComponent(totalValues);
		
		return numberProgressLayout;
	}

	@AutoGenerated
	private Panel buildQuestionPanel() {
		// common part: create layout
		questionPanel = new Panel();
		questionPanel.setImmediate(false);
		questionPanel.setWidth("-1px");
		questionPanel.setHeight("-1px");
		
		// questionPanelLayout
		questionPanelLayout = new VerticalLayout();
		questionPanelLayout.setImmediate(false);
		questionPanelLayout.setWidth("-1px");
		questionPanelLayout.setHeight("-1px");
		questionPanelLayout.setMargin(false);
		questionPanel.setContent(questionPanelLayout);
		
		return questionPanel;
	}

	@AutoGenerated
	private HorizontalLayout buildButtonToolbar() {
		// common part: create layout
		buttonToolbar = new HorizontalLayout();
		buttonToolbar.setImmediate(false);
		buttonToolbar.setWidth("-1px");
		buttonToolbar.setHeight("-1px");
		buttonToolbar.setMargin(false);
		
		// previousButton
		previousButton = new Button();
		previousButton.setCaption("Previous");
		previousButton.setImmediate(true);
		previousButton.setWidth("-1px");
		previousButton.setHeight("-1px");
		buttonToolbar.addComponent(previousButton);
		
		// nextButton
		nextButton = new Button();
		nextButton.setCaption("Next");
		nextButton.setImmediate(true);
		nextButton.setWidth("-1px");
		nextButton.setHeight("-1px");
		buttonToolbar.addComponent(nextButton);
		
		// finishButton
		finishButton = new Button();
		finishButton.setCaption("Finish");
		finishButton.setImmediate(true);
		finishButton.setWidth("-1px");
		finishButton.setHeight("-1px");
		buttonToolbar.addComponent(finishButton);
		
		return buttonToolbar;
	}
}
