package cz.cvut.fit.umati.ui.composite;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.ObjectProperty;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;

import cz.cvut.fit.umati.FreeBaseUtil;
import cz.cvut.fit.umati.constants.ParameterType;
import cz.cvut.fit.umati.constants.XmlDataType;
import cz.cvut.fit.umati.model.SemanticAnnotation;

@org.springframework.stereotype.Component
@org.springframework.context.annotation.Scope("session")
public class ParameterPathQuestion extends CustomComponent {
	@AutoGenerated
	private GridLayout mainLayout;

	@AutoGenerated
	private ListSelect parameterAnnotation;

	@AutoGenerated
	private HorizontalLayout searchLayout;

	@AutoGenerated
	private Button searchButton;

	@AutoGenerated
	private TextField searchField;

	@AutoGenerated
	private Label parameterAnnotationLabel;

	@AutoGenerated
	private ComboBox parameterDataType;

	@AutoGenerated
	private Label parameterDataTypeLabel;

	@AutoGenerated
	private TextField parameterName;

	@AutoGenerated
	private Label parameterNameLabel;

	@AutoGenerated
	private ComboBox parameterType;

	@AutoGenerated
	private Label parameterTypeLabel;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ParameterPathQuestion() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		// Search Field
		searchField.setPropertyDataSource(new ObjectProperty<String>(""));
		
		// TODO: vyrobit skryvani
		//TODO: brat v uvahu fragmenty!!!
		BeanItemContainer<ParameterType> endPointMethodContainer = new BeanItemContainer<ParameterType>(ParameterType.class, Arrays.asList(ParameterType.values()));
		parameterType.setContainerDataSource(endPointMethodContainer);
		parameterType.setImmediate(true);
		parameterType.setValue(ParameterType.VARIABLE);
		parameterType.addListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				if (parameterType.getValue() instanceof ParameterType) {
					ParameterType value = (ParameterType) parameterType.getValue();
					
					if (ParameterType.FIXED.equals(value)) {
						// Variable
						parameterDataType.setVisible(false);
						parameterDataTypeLabel.setVisible(false);
						searchLayout.setVisible(false);
						parameterAnnotationLabel.setVisible(false);
						parameterAnnotation.setVisible(false);	
					} else {
						// Variable
						parameterDataType.setVisible(true);
						parameterDataTypeLabel.setVisible(true);
						searchLayout.setVisible(true);
						parameterAnnotationLabel.setVisible(true);
						parameterAnnotation.setVisible(true);	
						
					}
				}
			}
		});
		
		// Parameter DataType
		BeanItemContainer<XmlDataType> xmlDataTypeContainer = new BeanItemContainer<XmlDataType>(XmlDataType.class);
		xmlDataTypeContainer.addAll(Arrays.asList(XmlDataType.values()));
		parameterDataType.setContainerDataSource(xmlDataTypeContainer);

		// Prepare search field
		searchField.setPropertyDataSource(new ObjectProperty<String>(""));
		
		//TODO: vyrobit sdílený fragment!!!!
		// Search Button
		searchButton.setPropertyDataSource(new ObjectProperty<Boolean>(Boolean.TRUE));
		searchButton.addListener(new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				BeanItemContainer<SemanticAnnotation> annotationContainer = new BeanItemContainer<SemanticAnnotation>(SemanticAnnotation.class);
				parameterAnnotation.setPropertyDataSource(null); // This is necessary, otherwise it's cleaning value!
				parameterAnnotation.setContainerDataSource(annotationContainer);
				parameterAnnotation.setItemCaptionMode(Select.ITEM_CAPTION_MODE_ID);
				parameterAnnotation.setItemCaptionPropertyId("name");
				
				Map<String, Object> result = FreeBaseUtil.query((String) searchField.getValue());
				@SuppressWarnings("unchecked")
				List<Object> data = (ArrayList<Object>) result.get("result");
				for (Object value : data) {
					@SuppressWarnings("unchecked")
					Map<String, Object> object = (Map<String, Object>) value;

					//TODO: tohle mapovani vyresit jinak!!!
					SemanticAnnotation semanticAnnotation = new SemanticAnnotation();
					semanticAnnotation.setMid((String) object.get("mid"));
					semanticAnnotation.setId((String) object.get("id"));
					semanticAnnotation.setName((String) object.get("name"));
					//semanticAnnotation.setNotable(notable) (object.get("id"));
					semanticAnnotation.setLang((String) object.get("lang"));
					semanticAnnotation.setScore((double) object.get("score"));
					annotationContainer.addItem(semanticAnnotation);
					
					System.out.println("SemanticAnnotation: " + semanticAnnotation);
				}
			}
		});
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setColumns(2);
		mainLayout.setRows(5);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// parameterTypeLabel
		parameterTypeLabel = new Label();
		parameterTypeLabel.setImmediate(false);
		parameterTypeLabel.setWidth("-1px");
		parameterTypeLabel.setHeight("-1px");
		parameterTypeLabel.setValue("Type of Parameter");
		mainLayout.addComponent(parameterTypeLabel, 0, 0);
		mainLayout.setComponentAlignment(parameterTypeLabel, new Alignment(6));
		
		// parameterType
		parameterType = new ComboBox();
		parameterType.setImmediate(false);
		parameterType.setWidth("-1px");
		parameterType.setHeight("-1px");
		mainLayout.addComponent(parameterType, 1, 0);
		
		// parameterNameLabel
		parameterNameLabel = new Label();
		parameterNameLabel.setImmediate(false);
		parameterNameLabel.setWidth("-1px");
		parameterNameLabel.setHeight("-1px");
		parameterNameLabel.setValue("Parameter");
		mainLayout.addComponent(parameterNameLabel, 0, 1);
		mainLayout.setComponentAlignment(parameterNameLabel, new Alignment(6));
		
		// parameterName
		parameterName = new TextField();
		parameterName.setImmediate(false);
		parameterName.setWidth("-1px");
		parameterName.setHeight("-1px");
		parameterName.setNullRepresentation("");
		mainLayout.addComponent(parameterName, 1, 1);
		
		// parameterDataTypeLabel
		parameterDataTypeLabel = new Label();
		parameterDataTypeLabel.setImmediate(false);
		parameterDataTypeLabel.setWidth("-1px");
		parameterDataTypeLabel.setHeight("-1px");
		parameterDataTypeLabel.setValue("Parameter Data Type");
		mainLayout.addComponent(parameterDataTypeLabel, 0, 2);
		mainLayout.setComponentAlignment(parameterDataTypeLabel, new Alignment(6));
		
		// parameterDataType
		parameterDataType = new ComboBox();
		parameterDataType.setImmediate(false);
		parameterDataType.setWidth("-1px");
		parameterDataType.setHeight("-1px");
		mainLayout.addComponent(parameterDataType, 1, 2);
		
		// parameterAnnotationLabel
		parameterAnnotationLabel = new Label();
		parameterAnnotationLabel.setImmediate(false);
		parameterAnnotationLabel.setWidth("-1px");
		parameterAnnotationLabel.setHeight("-1px");
		parameterAnnotationLabel.setValue("Semantic Annotation");
		mainLayout.addComponent(parameterAnnotationLabel, 0, 3);
		mainLayout.setComponentAlignment(parameterAnnotationLabel, new Alignment(6));
		
		// searchLayout
		searchLayout = buildSearchLayout();
		mainLayout.addComponent(searchLayout, 1, 3);
		
		// parameterAnnotation
		parameterAnnotation = new ListSelect();
		parameterAnnotation.setImmediate(false);
		parameterAnnotation.setWidth("100.0%");
		parameterAnnotation.setHeight("-1px");
		mainLayout.addComponent(parameterAnnotation, 1, 4);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildSearchLayout() {
		// common part: create layout
		searchLayout = new HorizontalLayout();
		searchLayout.setImmediate(false);
		searchLayout.setWidth("-1px");
		searchLayout.setHeight("-1px");
		searchLayout.setMargin(false);
		
		// searchField
		searchField = new TextField();
		searchField.setImmediate(false);
		searchField.setWidth("-1px");
		searchField.setHeight("-1px");
		searchField.setNullRepresentation("");
		searchLayout.addComponent(searchField);
		
		// searchButton
		searchButton = new Button();
		searchButton.setCaption("Search");
		searchButton.setImmediate(true);
		searchButton.setWidth("-1px");
		searchButton.setHeight("-1px");
		searchLayout.addComponent(searchButton);
		
		return searchLayout;
	}
}
